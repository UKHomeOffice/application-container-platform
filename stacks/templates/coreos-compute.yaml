---
AWSTemplateFormatVersion: '2010-09-09'
Description: CoreOS Compute Cluster Stack in {{ env }} environment
Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeCoreOSRole') }}
      Path: /

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: {{ env }}-coreos-compute
      Roles:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeCoreOSRole') }}
      PolicyDocument:
        Statement:
        - Resource: '*'
          Effect: Allow
          Action:
            - ec2:DescribeInstances
            - ec2:DescribeTags
            - ec2:DescribeRouteTables
            - ec2:DescribeVpcs
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
        - Resource: 'arn:aws:kms:{{ region }}:*:key/{{ kms_master_key_id }}'
          Effect: Allow
          Action:
            - 'kms:Decrypt'
        - Resource: 'arn:aws:s3:::{{ secrets_bucket_name }}/*'
          Effect: Allow
          Action:
            - 's3:Get*'
        - Resource: 'arn:aws:s3:::{{ secrets_bucket_name }}'
          Effect: Allow
          Action:
            - 's3:List*'
        - Resource: "arn:aws:iam::*"
          Effect: "Allow"
          Action:
            - "iam:GetGroup"
            - "iam:GetSSHPublicKey"
            - "iam:GetUser"
            - "iam:ListSSHPublicKeys"
        - Resource: "arn:aws:logs:*:*:*"
          Effect: "Allow"
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams

  CoreOSComputeScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # This won't work in regions with 2 AZs
      AvailabilityZones:
        - Fn::Select:
          - '0'
          - Fn::GetAZs: ''
        - Fn::Select:
          - '1'
          - Fn::GetAZs: ''
        - Fn::Select:
          - '2'
          - Fn::GetAZs: ''
      LaunchConfigurationName: {Ref: CoreOSComputeLaunchConfig}
      VPCZoneIdentifier:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet2') }}
      TerminationPolicies:
        - 'OldestInstance'
        - 'Default'
      MaxSize: 100
      MinSize: {{ compute_min_instances }}
      Tags:
        - Key: Name
          Value: {{ env }}-coreos-compute
          PropagateAtLaunch: true
        - Key: Env
          Value: {{ env }}
          PropagateAtLaunch: true
        - Key: Role
          Value: kubernetes
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: {{ compute_pause_time }}

  CoreOSComputeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: {Ref: InstanceProfile}
      ImageId: {{ get_ami_id(ec2_conn, coreos_ami_name) }}
      InstanceMonitoring: false
      InstanceType: {{ instance_type }}
      KeyName: {{ ssh_key_name }}
      SecurityGroups:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "200"
            DeleteOnTermination: true
            VolumeType: "gp2"
      UserData:
        'Fn::Base64': |
          #cloud-config

          coreos:
            etcd2:
              proxy: on
              initial-cluster: {% for n in etcd_nodes %}node{{ loop.index0 }}=https://{{ n['ip'] }}:2380{%- if not loop.last %},{% endif %}{%- endfor %}
              listen-client-urls: https://127.0.0.1:2379
              cert-file: /run/etcd2/etcd-crt.pem
              key-file: /run/etcd2/etcd-key.pem
            fleet:
              metadata: env={{ env }},public_ip=$public_ipv4,private_ipv4=$private_ipv4,region={{ region }},role=kubernetes
              etcd_servers: https://127.0.0.1:2379
            flannel:
              interface: $private_ipv4
              etcd_endpoints: https://127.0.0.1:2379
              etcd_cafile: /etc/ssl/etcd/platform_ca.pem
            locksmith:
              endpoint: https://127.0.0.1:2379
            update:
              reboot-strategy: 'off'
            units:
            - name: iptables-restore.service
              enable: true
              command: start
            - name: 90-mtu.network
              command: start
              enable: true
              content: |
                [Network]
                DHCP=v4

                [DHCP]
                UseMTU=false
                UseDomains=true

                [Link]
                MTUBytes=1500
            - name: systemd-networkd.service
              command: start
              enable: true
            - name: set-eth0-mtu.service
              command: start
              content: |
                [Unit]
                Description=Set eth0 MTU

                [Service]
                Type=oneshot
                RemainAfterExit=yes
                ExecStart=/usr/bin/ip link set mtu 1500 dev eth0
            - name: docker.service
              drop-ins:
              - name: 10-opts.conf
                content: |
                  [Service]
                  Environment=DOCKER_OPTS='--iptables="false" --log-opt max-size=100m --log-opt max-file=1'
            - name: etcd2.service
              command: start
              enable: true
              drop-ins:
              - name: 10-dependencies.conf
                content: |
                  [Unit]
                  Requires=update-ca-certificates.service
                  After=update-ca-certificates.service
              - name: 15-s3secrets.conf
                content: |
                  [Service]
                  RuntimeDirectory=etcd2
                  RuntimeDirectoryMode=0700
                  EnvironmentFile=/etc/s3secrets
                  ExecStartPre=/opt/bin/s3secrets -region=${AWS_REGION} -bucket=${BUCKET_NAME} -output-dir=%t/etcd2 -path=etcd/
            - name: fleet.service
              command: start
              enable: true
              drop-ins:
              # TODO remove below once fixed, see https://github.com/coreos/fleet/issues/1329
              - name: 10-dependencies.conf
                content: |
                  [Unit]
                  After=etcd2.service
                  Wants=fleet.socket
                  After=fleet.socket
                  Requires=etcd2.service
            - name: flanneld.service
              command: start
              enable: true
              drop-ins:
              - name: 50-network-config.conf
                content: |
                  [Service]
                  ExecStartPre=/usr/bin/etcdctl --peers https://127.0.0.1:2379 set /coreos.com/network/config '{"Network":"{{ flannel_cidr }}","Backend":{"Type":"vxlan"}}'
              # TODO(vaijab): Below should not be required.
              # See https://github.com/coreos/flannel/issues/162
              - name: 10-env-config.conf
                content: |
                  [Service]
                  EnvironmentFile=/run/flannel/options.env
            - name: install-kubernetes.service
              command: start
              content: |
                [Unit]
                Description=Install kubernetes

                [Service]
                Type=oneshot
                RemainAfterExit=yes
                TimeoutStartSec=30
                Environment="URL={{ kubernetes_release_url }}"
                Environment="OUTPUT_FILE=/opt/bin/hyperkube"
                Environment="MD5SUM={{ kubernetes_release_md5 }}"
                ExecStart=/usr/bin/mkdir -p /opt/bin
                ExecStart=/usr/bin/bash -c 'until [[ -x ${OUTPUT_FILE} ]] && [[ $(md5sum ${OUTPUT_FILE} | cut -f1 -d" ") == ${MD5SUM} ]]; do wget -q -O ${OUTPUT_FILE} ${URL} && chmod +x ${OUTPUT_FILE}; done'
            - name: install-vault.service
              command: start
              content: |
                [Unit]
                Description=Install vault

                [Service]
                Type=oneshot
                RemainAfterExit=yes
                TimeoutStartSec=300
                Environment="URL={{ vault_release_url }}"
                Environment="OUTPUT_FILE=/opt/bin/vault"
                Environment="TMP_FILE=/tmp/vault.zip"
                Environment="MD5SUM={{ vault_release_md5 }}"
                ExecStart=/usr/bin/mkdir -p /opt/bin
                ExecStart=/usr/bin/bash -c 'until [[ -x ${OUTPUT_FILE} ]] && [[ $(md5sum ${OUTPUT_FILE} | cut -f1 -d" ") == ${MD5SUM} ]]; do wget -q -O ${TMP_FILE} ${URL} && unzip ${TMP_FILE} -d /opt/bin; done'
            - name: install-s3secrets.service
              command: start
              content: |
                [Unit]
                Description=Install s3secrets
                Documentation=https://github.com/UKHomeOffice/s3secrets
                Before=etcd2.service

                [Service]
                Type=notify
                NotifyAccess=all
                RemainAfterExit=yes
                TimeoutStartSec=30
                Environment="URL={{ s3secrets_release_url }}"
                Environment="OUTPUT_FILE=/opt/bin/s3secrets"
                Environment="MD5SUM={{ s3secrets_release_md5 }}"
                ExecStartPre=/usr/bin/mkdir -p /opt/bin
                ExecStartPre=/usr/bin/bash -c 'until [[ -x ${OUTPUT_FILE} ]] && [[ $(md5sum ${OUTPUT_FILE} | cut -f1 -d" ") == ${MD5SUM} ]]; do wget -q -O ${OUTPUT_FILE} ${URL} && chmod +x ${OUTPUT_FILE}; done'
                ExecStart=/usr/bin/systemd-notify --ready --status="succussfully downloaded the s3secrets"
            - name: update-ca-certificates.service
              command: start
              enable: true
              content: |
                [Unit]
                Description=Update CA Certificates
                Requires=install-s3secrets.service
                After=install-s3secrets.service
                Before=etcd2.service

                [Service]
                Type=notify
                NotifyAccess=all
                EnvironmentFile=/etc/environment
                EnvironmentFile=/etc/s3secrets
                RemainAfterExit=yes
                TimeoutStartSec=300

                ExecStartPre=/opt/bin/s3secrets -region=${AWS_REGION} -bucket=${BUCKET_NAME} -path=platform/platform_ca.pem -output-dir=/etc/ssl/certs
                ExecStartPre=/usr/bin/mkdir -p /etc/ssl/etcd
                ExecStartPre=/usr/bin/cp -f /etc/ssl/certs/platform_ca.pem /etc/ssl/etcd/platform_ca.pem
                ExecStartPre=/usr/sbin/update-ca-certificates
                ExecStart=/usr/bin/systemd-notify --ready --status="succussfully updated the ca root certificates"
          write_files:
          # Note: the newline post COMMIT is required by iptables-restore
          - path: /var/lib/iptables/rules-save
            content: |
              *filter
              :INPUT ACCEPT [0:0]
              :FORWARD ACCEPT [0:0]
              -A FORWARD -d 169.254.169.254/32 -i docker0 -p tcp -m tcp --dport 80 -j DROP
              -A FORWARD -i docker0 -p tcp -m tcp --dport 2379 -j DROP
              :OUTPUT ACCEPT [0:0]
              COMMIT

          - path: /etc/s3secrets
            content: |
              BUCKET_NAME={{ secrets_bucket_name }}
              AWS_REGION={{ region }}
          - path: /etc/aws-environment
            content: |
              AWS_REGION={{ region }}
              DNS_ZONE_NAME={{ dns_zone_name }}
              ENVIRONMENT={{ env }}
              ETCD_NODES={% for n in etcd_nodes %}{{ n['ip'] }}:2379{%- if not loop.last %},{% endif %}{%- endfor %}
              KUBE_API_NODES={% for n in etcd_nodes %}{{ n['ip'] }}:6443{%- if not loop.last %},{% endif %}{%- endfor %}
