---
AWSTemplateFormatVersion: '2010-09-09'
Description: Infrastructure stack in {{ env }} environment
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: {{ vpc_cidr }}
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: {{ vpc_name }}
        - Key: Env
          Value: {{ env }}

  ComputeCoreOSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
            Action:
              - sts:AssumeRole
      Path: /

  EtcdCoreOSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
            Action:
              - sts:AssumeRole
      Path: /

  ComputeDefaultSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: {Ref: VPC}
      GroupDescription: {{ env }}-vpc Compute Default SG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
      SecurityGroupIngress:
{% for subnet in ssh_access_subnets %}
        - IpProtocol: tcp
          CidrIp: {{ subnet }}
          FromPort: 22
          ToPort: 22
{%- endfor %}
      Tags:
        - Key: Name
          Value: {{ env }}-compute-default
        - Key: Env
          Value: {{ env }}

  SecureDefaultSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: {Ref: VPC}
      GroupDescription: {{ env }}-vpc Secure Default SG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
        # The kube-api requires access to the kubelet on this port to handle exec and logs kubectl commands
        - IpProtocol: tcp
          DestinationSecurityGroupId: {Ref: ComputeDefaultSG}
          FromPort: 10250
          ToPort: 10250
      SecurityGroupIngress:
{% for subnet in ssh_access_subnets %}
        - IpProtocol: tcp
          CidrIp: {{ subnet }}
          FromPort: 22
          ToPort: 22
{%- endfor %}
        # Allow etcd peer traffic from compute subnets
        - IpProtocol: tcp
          SourceSecurityGroupId: {Ref: ComputeDefaultSG}
          FromPort: 2379
          ToPort: 2379
        - IpProtocol: tcp
          SourceSecurityGroupId: {Ref: ComputeDefaultSG}
          FromPort: 2380
          ToPort: 2380
        - IpProtocol: tcp
          SourceSecurityGroupId: {Ref: ComputeDefaultSG}
          FromPort: 6443
          ToPort: 6443
        # TODO(vaijab): maybe expose vault via an ELB
        - IpProtocol: tcp
          SourceSecurityGroupId: {Ref: ComputeDefaultSG}
          FromPort: 8200
          ToPort: 8200
      Tags:
        - Key: Name
          Value: {{ env }}-secure-default
        - Key: Env
          Value: {{ env }}

  # Allow traffic within compute subnets
  ComputeAllTrafficSGIn:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {Ref: ComputeDefaultSG}
      IpProtocol: -1
      SourceSecurityGroupId: {Ref: ComputeDefaultSG}
      FromPort: -1
      ToPort: -1

  # Allow traffic within secure subnets
  SecureAllTrafficSGIn:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {Ref: SecureDefaultSG}
      IpProtocol: -1
      SourceSecurityGroupId: {Ref: SecureDefaultSG}
      FromPort: -1
      ToPort: -1

{% for n in compute_subnets %}
  ComputeSubnet{{ loop.index0 }}:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '{{ loop.index0 }}'
          - Fn::GetAZs: ''
      VpcId:
        Ref: VPC
      CidrBlock: {{ n }}
      Tags:
        - Key: Name
          Value: {{ env }}-compute-az{{ loop.index0 }}
        - Key: Env
          Value: {{ env }}

  ComputeSubnetRouteTableAssociation{{ loop.index0 }}:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: ComputeSubnet{{ loop.index0 }}
      RouteTableId:
        Ref: RouteTable
{%- endfor %}

{% for n in secure_subnets %}
  SecureSubnet{{ loop.index0 }}:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '{{ loop.index0 }}'
          - Fn::GetAZs: ''
      VpcId:
        Ref: VPC
      CidrBlock: {{ n }}
      Tags:
        - Key: Name
          Value: {{ env }}-secure-az{{ loop.index0 }}
        - Key: Env
          Value: {{ env }}

  SecureSubnetRouteTableAssociation{{ loop.index0 }}:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SecureSubnet{{ loop.index0 }}
      RouteTableId:
        Ref: RouteTable
{%- endfor %}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: {{ env }}-igw
        - Key: Env
          Value: {{ env }}

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: {{ env }}-default-routetable
        - Key: Env
          Value: {{ env }}

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

Outputs:
  VpcId:
    Value: {Ref: VPC}
  ComputeCoreOSRole:
    Value: {Ref: ComputeCoreOSRole}
  EtcdCoreOSRole:
    Value: {Ref: EtcdCoreOSRole}
  ComputeDefaultSG:
    Value: {Ref: ComputeDefaultSG}
  SecureDefaultSG:
    Value: {Ref: SecureDefaultSG}
  ComputeSubnet0:
    Value: {Ref: ComputeSubnet0}
  ComputeSubnet1:
    Value: {Ref: ComputeSubnet1}
  ComputeSubnet2:
    Value: {Ref: ComputeSubnet2}
  SecureSubnet0:
    Value: {Ref: SecureSubnet0}
  SecureSubnet1:
    Value: {Ref: SecureSubnet1}
  SecureSubnet2:
    Value: {Ref: SecureSubnet2}
